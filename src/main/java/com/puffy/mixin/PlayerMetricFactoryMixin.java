package com.puffy.mixin;

import com.mojang.authlib.GameProfile;
import com.puffy.metrics.*;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import org.jetbrains.annotations.NotNull;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;

@Mixin(ServerPlayerEntity.class)
public abstract class PlayerMetricFactoryMixin extends PlayerEntity implements PlayerMetricFactory {
    @Shadow
    @Final
    public MinecraftServer server;
    @Unique
    AntiFlyPlayerMetric antiFlyPlayerMetric = new AntiFlyPlayerMetric();
    @Unique
    AntiSpeedPlayerMetric antiSpeedPlayerMetric = new AntiSpeedPlayerMetric();
    @Unique
    AntiKillAuraPlayerMetric antiKillAuraPlayerMetric = new AntiKillAuraPlayerMetric();

    public PlayerMetricFactoryMixin(World world, BlockPos pos, float yaw, GameProfile gameProfile) {
        super(world, pos, yaw, gameProfile);
    }

    @Override
    public @NotNull PlayerMetric getMetrics(@NotNull PlayerMetricType playerMetrics) {
        if (playerMetrics == PlayerMetricType.ANTI_FLY) {
            return antiFlyPlayerMetric;
        }

        if (playerMetrics == PlayerMetricType.ANTI_SPEED) {
            return antiSpeedPlayerMetric;
        }

        if (playerMetrics == PlayerMetricType.ANTI_KILLAURA) {
            return antiKillAuraPlayerMetric;
        }

        throw new RuntimeException("Failed to return the PlayerMetric for the requested metric.");
    }

    @Override
    public void updateAllMetrics(@NotNull MinecraftServer server) {
        ServerPlayerEntity playerEntity = (ServerPlayerEntity) (Object) this;

        antiFlyPlayerMetric.updateMetric(playerEntity, server);
        antiSpeedPlayerMetric.updateMetric(playerEntity, server);
        antiKillAuraPlayerMetric.updateMetric(playerEntity, server);
    }
}
