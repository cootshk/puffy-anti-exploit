package com.puffy.mitigations.antispeed

import java.util.function.BiPredicate
import net.minecraft.item.Items
import net.minecraft.server.network.ServerPlayerEntity
import org.slf4j.LoggerFactory

data class Weight(
    val title: String,
    val multiplier: Double,
    val predicate: BiPredicate<ServerPlayerEntity, Double>
)

const val MAX_FALLING_Y_DIFFERENCE = -0.5
const val MAX_ASCENDING_Y_DIFFERENCE = 0.2
const val SERVER_VELOCITY_THRESHOLD = 3

object MagnitudeWeighter {
    private val logger = LoggerFactory.getLogger("puffy-anti-exploit")

    private val weights =
        listOf(
            Weight("Elytra Bias", 0.20) { player, _ -> player.isFallFlying },
            Weight("Falling Bias", 0.55) { player, lastY ->
                player.y - lastY < MAX_FALLING_Y_DIFFERENCE
            },
            Weight("Elytra Flyhack Bias", 6.0) { player, lastY ->
                player.isFallFlying && player.y - lastY > MAX_ASCENDING_Y_DIFFERENCE
            },
            Weight("Creative Mode Bias", 0.0) { player, _ -> player.isCreative },
            Weight("Server-permitted Flight Bias", 0.25) { player, _ ->
                player.abilities.flying || player.abilities.allowFlying
            },
            Weight("Server-permitted Velocity Bias", 0.25) { player, _ ->
                player.velocity.length() > SERVER_VELOCITY_THRESHOLD
            },
            Weight("Server-permitted Firework Bias", 0.10) { player, _ ->
                player.isFallFlying &&
                    player.inventory.main.any { stack -> stack.isOf(Items.FIREWORK_ROCKET) }
            }
        )

    private fun getActiveWeightsForPlayer(player: ServerPlayerEntity, lastY: Double) =
        weights.filter { weight -> weight.predicate.test(player, lastY) }

    private fun getTotalWeightedMultiplier(weights: List<Weight>) =
        weights.fold(1.0) { acc, weight -> weight.multiplier * acc }

    fun getWeightedMagnitude(
        initialMagnitude: Double,
        player: ServerPlayerEntity,
        lastY: Double
    ): Double {
        val activeWeights = getActiveWeightsForPlayer(player, lastY)

        activeWeights.forEach { weight ->
            logger.info("Weight '${weight.title}' is active for player ${player.name.string}")
        }

        return initialMagnitude * getTotalWeightedMultiplier(activeWeights)
    }
}
