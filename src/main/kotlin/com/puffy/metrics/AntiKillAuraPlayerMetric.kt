package com.puffy.metrics

import net.minecraft.entity.Entity
import net.minecraft.network.packet.Packet
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket
import net.minecraft.server.MinecraftServer
import net.minecraft.server.network.ServerPlayerEntity
import org.slf4j.LoggerFactory
import kotlin.math.abs
import kotlin.math.acos

const val MAXIMUM_SUSPICIOUS_HITS_IN_PERIOD = 4
const val PERIOD_TIME_IN_TICKS = 150
const val AIM_DEGREE_TOLERANCE = 35

const val MAXIMUM_DISTANCE_METERS = 6

class AntiKillAuraPlayerMetric : PlayerMetric {
    private var suspiciousHitCountInPeriod = 0
    private var periodTickCounter = 0

    override fun isPlayerSuspicious(): Boolean {
        return suspiciousHitCountInPeriod >= MAXIMUM_SUSPICIOUS_HITS_IN_PERIOD
    }

    override fun inspectIncomingPacketData(packet: Packet<*>, player: ServerPlayerEntity) {
        val interactPacket = packet as PlayerInteractEntityC2SPacket
        if (interactPacket.type.type != PlayerInteractEntityC2SPacket.InteractType.ATTACK) {
            return
        }

        val targetEntity = interactPacket.getEntity(player.serverWorld) ?: return

        if (isHitSuspicious(player, targetEntity)) {
            suspiciousHitCountInPeriod++
        }
    }

    private fun isHitSuspicious(player: ServerPlayerEntity, targetEntity: Entity): Boolean {
        if (!targetEntity.isAlive()) {
            return false
        }

        val playerEye = player.getCameraPosVec(0.0F)
        val playerLookVector = player.cameraEntity.getRotationVec(0.0F)
        val directionTowardsEntity = targetEntity.boundingBox.center.subtract(playerEye).normalize()
        val angleOfError = Math.toDegrees(acos(playerLookVector.dotProduct(directionTowardsEntity)))

        val distanceBetweenPlayerAndTarget = targetEntity.pos.squaredDistanceTo(player.pos)
        return abs(angleOfError) > AIM_DEGREE_TOLERANCE
                || distanceBetweenPlayerAndTarget > MAXIMUM_DISTANCE_METERS * MAXIMUM_DISTANCE_METERS
                || isTargetBehindWallFromPlayer(player, targetEntity)
    }

    private fun isTargetBehindWallFromPlayer(player: ServerPlayerEntity, targetEntity: Entity): Boolean {
        return false // TODO: Make a way to do this well
    }

    override fun updateMetric(player: ServerPlayerEntity, server: MinecraftServer) {
        periodTickCounter++

        if (periodTickCounter >= PERIOD_TIME_IN_TICKS) {
            suspiciousHitCountInPeriod = 0
            periodTickCounter = 0;
        }
    }
}