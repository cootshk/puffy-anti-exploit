package com.puffy

import com.puffy.metrics.PlayerMetric
import com.puffy.metrics.PlayerMetricFactory
import com.puffy.metrics.PlayerMetricType
import net.minecraft.network.packet.Packet
import net.minecraft.server.network.ServerPlayerEntity
import org.slf4j.LoggerFactory
import java.util.logging.Logger

/**
 * The packet which triggers a measurement of the metric.
 */
enum class MetricPacket {
    PLAYER_MOVE,
    PLAYER_INTERACT_ENTITY
}

val METRIC_MAP: Map<MetricPacket, List<PlayerMetricType>> = mapOf(
        MetricPacket.PLAYER_MOVE to listOf(PlayerMetricType.ANTI_SPEED, PlayerMetricType.ANTI_FLY),
        MetricPacket.PLAYER_INTERACT_ENTITY to listOf(PlayerMetricType.ANTI_KILLAURA)
)

interface SuspiciousPacketIdentifiedListener {
    fun onSuspiciousPacketIdentified(packet: MetricPacket, metric: PlayerMetricType, player: ServerPlayerEntity)
}

/**
 * Object which deals with any packets sent by a client which pushes them over the "suspicious activity" thresholds.
 */
object MetricPacketDetection {
    private val suspiciousPacketListeners: MutableSet<SuspiciousPacketIdentifiedListener> = mutableSetOf()

    private fun findAllMetricsForPacket(packet: MetricPacket): List<PlayerMetricType> = METRIC_MAP.entries.first { entry -> entry.key == packet }.value
    fun detectFirstSuspiciousMetric(packet: MetricPacket, player: ServerPlayerEntity, packetData: Packet<*>): PlayerMetricType? {
        val metrics = findAllMetricsForPacket(packet)
        val playerMetrics = player as PlayerMetricFactory
        // Some metrics specifically rely on incoming packet data
        updatePacketBasedMetrics(metrics, player, playerMetrics, packetData)

        val suspiciousMetric = metrics.find { playerMetricType -> playerMetrics.getMetrics(playerMetricType).isPlayerSuspicious() }

        if (suspiciousMetric != null) {
            notifySuspiciousPacketListeners(packet, suspiciousMetric, player)
        }

        return suspiciousMetric
    }

    private fun updatePacketBasedMetrics(metrics: List<PlayerMetricType>, player: ServerPlayerEntity, playerMetrics: PlayerMetricFactory, packetData: Packet<*>) = metrics.forEach { playerMetricType -> playerMetrics.getMetrics(playerMetricType).inspectIncomingPacketData(packetData, player) }

    private fun notifySuspiciousPacketListeners(packet: MetricPacket, suspiciousMetric: PlayerMetricType, player: ServerPlayerEntity) = suspiciousPacketListeners.forEach { listener -> listener.onSuspiciousPacketIdentified(packet, suspiciousMetric, player) }

    fun registerSuspiciousPacketListener(listener: SuspiciousPacketIdentifiedListener) {
        suspiciousPacketListeners.add(listener)
    }

    fun unregisterSuspiciousPacketListener(listener: SuspiciousPacketIdentifiedListener) {
        suspiciousPacketListeners.remove(listener)
    }
}