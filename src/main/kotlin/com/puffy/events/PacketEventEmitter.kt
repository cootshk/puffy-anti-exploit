package com.puffy.events

import kotlin.reflect.KClass
import kotlin.reflect.full.isSubclassOf
import net.minecraft.network.packet.Packet
import net.minecraft.server.network.ServerPlayerEntity

data class PacketEvent<T : Packet<*>>(val player: ServerPlayerEntity, val packet: T)

object PacketEventEmitter : EventStream<PacketEvent<*>> {
    private object PacketEventListener : EventStreamListener<ServerPlayerEntity, PacketEvent<*>> {
        private val listeners:
            MutableMap<ServerPlayerEntity, MutableSet<EventListener<PacketEvent<*>>>> =
            mutableMapOf()

        override fun register(
            identifier: ServerPlayerEntity,
            listener: EventListener<PacketEvent<*>>
        ) {
            if (listeners[identifier] == null) {
                listeners[identifier] = mutableSetOf()
            }

            listeners[identifier]?.add(listener)
        }

        override fun unregister(
            identifier: ServerPlayerEntity,
            listener: EventListener<PacketEvent<*>>
        ) {
            listeners[identifier]?.remove(listener)
        }

        fun notifyListeners(event: PacketEvent<*>) {
            listeners
                .filter { entry -> entry.key == event.player }
                .forEach { entry -> entry.value.forEach { listener -> listener.onEvent(event) } }
        }
    }

    override fun sendEvent(event: PacketEvent<*>) {
        PacketEventListener.notifyListeners(event)
    }

    fun <T : Packet<*>> addListener(
        player: ServerPlayerEntity,
        packetClass: KClass<T>,
        listener: EventListener<PacketEvent<T>>
    ) {
        PacketEventListener.register(player) { event ->
            val receivedPacketClass = event.packet::class
            if (
                receivedPacketClass == packetClass || receivedPacketClass.isSubclassOf(packetClass)
            ) {
                // We perform a reflection check, so this is guaranteed
                // to be a proper cast--we're just unable to do it at
                // compile-time because the type info for PacketEvent<T>
                // is erased once submitted to the listeners.
                @Suppress("UNCHECKED_CAST") listener.onEvent(event as PacketEvent<T>)
            }
        }
    }
}
